= Notes on Binary Analysis in Linux =

This page is created while reading the book
- *Learning Linux Binary Analysis* by *Ryan "Elfmaster" O'Neill*

Hearty Thanks and Kudos to Ryan for writing this book

TODO: TOC

== gnu_tools_for_binary|Tools for the Trade : GNU Tools for Binary Analysis ==
- *gas* - GNU linker and assembler
- *gdb* - GNU Debugger

=== Executable and Linkable Format ===
- *objdump* - displays information from object files
- *objcopy* - object copy and translate object files
- *strace* - trace system calls and signals
- *ltrace* - library call tracer
- *ptrace* - a system call to trace a process
- *ftrace* - trace the call to the fucntions within the binary
- *nm* - list symbols from object files
- *addr2line* - Convert addresses to file name and line numbers
- *c++filt* - Filter to demangle encoded c++ symbols
- *strip* - discrads symbols from the binary
- *string* - prints listable strings from a file

== Relocatable code injection ==
- Eresi (http://www.eresi-project.org)
- Quenya. http://www.bitlackeys.org/projects/quenya_32bit.tgz

== shape_of_linux_binary|The ELF Binary Format ==
- complicated and dry \_0_/
- compostion of
    - program loading
    - dynamic linking
    - symbol table lookups
- program execution implies ELF binary format

== ELF Layout ==

|----------------------|
| ELF Header           |
|----------------------|
| Section Header Table |
|----------------------|
| Program Header Table |
|----------------------|
| Dynamic Section      |
|----------------------|
| Relocation Section   |
|----------------------|
|                      |
|----------------------|


=== ELF file types ===
ELF file types
- ET_NONE - unknown type
- ET_REL - Relocatable object files are generally pieces of Position independent
           code - (PIC) that have not yet been linked into an executable.
           compiled object code
- ET_EXEC - executable, entry point for a process
- ET_DYN - shared object
- ET_CORE - core file, dump of a full process image during the time of a progra
            crash or when process has delivered a SIGSEGV. use GDB to read core

==== Program headers ====
{{{
psg@psglinux:~/working/work-env$ readelf -h /bin/ls
ELF Header:
Magic:   7f 45 4c 46 02 01 01 00 00 00 00 00 00 00 00 00
Class:                             ELF64
Data:                              2's complement, little endian
Version:                           1 (current)
OS/ABI:                            UNIX - System V
ABI Version:                       0
Type:                              DYN (Shared object file)
Machine:                           Advanced Micro Devices X86-64
Version:                           0x1
Entry point address:               0x5850
Start of program headers:          64 (bytes into file)
Start of section headers:          132000 (bytes into file)
Flags:                             0x0
Size of this header:               64 (bytes)
Size of program headers:           56 (bytes)
Number of program headers:         9
Size of section headers:           64 (bytes)
Number of section headers:         28
Section header string table index: 27
}}}

==== Program Header ====
- An executable or shared object file's program header table is an array of
  structures, each describing a segment or other information the system needs to
  prepare the program for exe‐cution. An object file segment contains one or
  more sections.  Program headers are  meaningful  only  for  executable  and
  shared object files.
- Describes the memory layout of a program
- The  main difference between the 32-bit and the 64-bit program header lies in
  the location of the p_flags member in the total struct.

{{{
psg@psglinux:~/working/work-env$ readelf -l /bin/ls

Elf file type is DYN (Shared object file)
Entry point 0x5850
There are 9 program headers, starting at offset 64

Program Headers:
  Type           Offset             VirtAddr           PhysAddr
                 FileSiz            MemSiz              Flags  Align
  PHDR           0x0000000000000040 0x0000000000000040 0x0000000000000040
                 0x00000000000001f8 0x00000000000001f8  R E    0x8
  INTERP         0x0000000000000238 0x0000000000000238 0x0000000000000238
                 0x000000000000001c 0x000000000000001c  R      0x1
      [Requesting program interpreter: /lib64/ld-linux-x86-64.so.2]
  LOAD           0x0000000000000000 0x0000000000000000 0x0000000000000000
                 0x000000000001e6e8 0x000000000001e6e8  R E    0x200000
  LOAD           0x000000000001eff0 0x000000000021eff0 0x000000000021eff0
                 0x0000000000001278 0x0000000000002570  RW     0x200000
  DYNAMIC        0x000000000001fa38 0x000000000021fa38 0x000000000021fa38
                 0x0000000000000200 0x0000000000000200  RW     0x8
  NOTE           0x0000000000000254 0x0000000000000254 0x0000000000000254
                 0x0000000000000044 0x0000000000000044  R      0x4
  GNU_EH_FRAME   0x000000000001b1a0 0x000000000001b1a0 0x000000000001b1a0
                 0x0000000000000884 0x0000000000000884  R      0x4
  GNU_STACK      0x0000000000000000 0x0000000000000000 0x0000000000000000
                 0x0000000000000000 0x0000000000000000  RW     0x10
  GNU_RELRO      0x000000000001eff0 0x000000000021eff0 0x000000000021eff0
                 0x0000000000001010 0x0000000000001010  R      0x1

 Section to Segment mapping:
  Segment Sections...
   00
   01     .interp
   02     .interp .note.ABI-tag .note.gnu.build-id .gnu.hash .dynsym .dynstr .gnu.version .gnu.version_r .rela.dyn .rela.plt .init .plt .plt.got .text .fini .rodata .eh_frame_hdr .eh_frame
   03     .init_array .fini_array .data.rel.ro .dynamic .got .data .bss
   04     .dynamic
   05     .note.ABI-tag .note.gnu.build-id
   06     .eh_frame_hdr
   07
   08     .init_array .fini_array .data.rel.ro .dynamic .got
}}}
==== Section Header ====
The text segments will be as follows:
• [.text]: This is the program code
• [.rodata]: This is read-only data
• [.hash]: This is the symbol hash table
• [.dynsym ]: This is the shared object symbol data
• [.dynstr ]: This is the shared object symbol name
• [.plt]: This is the procedure linkage table
• [.rel.got]: This is the G.O.T relocation data
The data segments will be as follows:
• [.data]: These are the globally initialized variables
• [.dynamic]: These are the dynamic linking structures and objects
• [.got.plt]: This is the global offset table
• [.bss]: These are the globally uninitialized variables

- ELF symbols
    - there exist two symbol tables.
    - -S output shown previously, you can see two sections:
        - .dynsym : global symbols that reference symbols from an external source, such as libc functions like printf,
        - .symtab : will contain all of the symbols in .dynsym, as well as the local symbols for the executable, such as global variables, or local functions that you have defined in your code

==== Symbols ====
==== Relocations ====
==== Dynamic Linking ====
==== Coding an ELF Parser ====



= compilation ===
=== linking ===
== Debugging a binary as a black box ==
=== understanding the sys and proc files ===
=== process files : files to looks for in /proc ===
=== process files : files to looks for in /sys ===


